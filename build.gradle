buildscript {
    project.version ='0.2.0'
    ext {
        kotlin_version = '1.2.21'

        //testing
        junit_platform_version = '1.1.0'
        spek_version = '1.1.5'
        atrium_version = '0.6.0'
        mockito_kotlin_version = '1.5.0'

        //publish.gradle
        bintray_version = '1.7.3'
        publish_pkg_name = project.name
        github_url = "https://github.com/robstoll/${project.name}"
        publish_vcsUrl = "${github_url}.git"

        //dokka
        dokka_version = '0.9.14'
        dokka_sourceMapping = 'tree/v0.2.0'

        projectPrefixed = { String name -> project(":${rootProject.name}-$name") }
        srcKotlin = 'src/main/kotlin'
        srcOwnModule = { String name -> "${rootProject.projectDir}/${rootProject.name}-$name/${ext.srcKotlin}" }
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

plugins {
    id 'ch.tutteli.junitjacoco' version '0.2.0'
}

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/robstoll/tutteli-jars" }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile("org.jetbrains.spek:spek-api:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }

    testRuntime("org.jetbrains.spek:spek-junit-platform-engine:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile("ch.tutteli:atrium-cc-en_UK-robstoll:$atrium_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/kdoc"
    linkMapping {
        dir = "$srcKotlin"
        url = "$github_url/${dokka_sourceMapping}/${project.name}/$srcKotlin"
        suffix = '#L'
    }
}

task sourceJar(type: Jar) {
    from project.sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: dokka) {
    from dokka.outputDirectory
    classifier = 'javadoc'
}
ext {
    publish_artifactId = name
    publish_description = "A set of Spek extensions"
    publish_artifacts = [sourceJar, javadocJar]
}

apply from: "${rootProject.projectDir}/gradle/scripts/publish.gradle"

/*

Release & deploy a commit
--------------------------------
1. change version in build.gradle to X.Y.Z
2. update master:
    a) point to the tag
        1) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        2) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) commit (modified build.gradle, README.md)
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) gr bintrayUpload
    b) Log in to bintray, check and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------
1. change version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
3. commit & push changes

*/
